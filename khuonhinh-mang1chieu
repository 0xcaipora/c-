template <class T>
class M1C {
private:
	int n;
	T* p;
public:
	M1C();
	M1C(int n);
	void Nhap();
	void Xuat();
};

template <class T>
M1C<T>::M1C() {
	n = 0;
	p = NULL;
}
template <class T>
M1C<T>::M1C(int n) {
	this->n = n;
	p = new T[n];

}
template <class T>
void M1C<T>::Nhap() {
	if (n == 0) {
		cout << "Nhap so phan tu mang: ";
		cin >> n;
		p = new T[n];
	}
	cout << "Nhap gia tri cac phan tu mang" << endl;
	for (int i = 0; i < n; i++) {
		cout << "Phan tu p[" << i << "] = ";
		cin >> p[i];
	}
	cout << endl;
}
template <class T>
void M1C<T>::Xuat() {
	cout << "Gia tri cac phan tu mang la : ";
	for (int i = 0; i < n; i++) {
		cout << p[i] << " ";
	}
	cout << endl;

}

//kiem thu
void main() {
	M1C<int> m1;
	m1.Nhap();
	m1.Xuat();

	M1C<double> m2(5);
	m2.Nhap();
	m2.Xuat();
}
